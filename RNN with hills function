import numpy as np
import pandas as pd
from tensorflow.keras.models import load_model
import random
keras.open("6000_5_if_new_best_model.keras")
rnn_model = load_model("6000_5_if_new_best_model.keras")  # Replace with model path


def mutation_prob(sequence):
    sequence = np.expand_dims(sequence, axis=0) 
    return rnn_model.predict(sequence)[0][0]  

INTRON_10_START = 106991364
INTRON_10_END = 107004364

csv_file = "cry1mutations(1).csv"  # Replace with file path
mutations = pd.read_csv(csv_file)

vcf_header = """##fileformat=VCFv4.2
##INFO=<ID=SPLICEAI,Number=.,Type=String,Description="SpliceAI scores">
#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO"""

vcf_rows = []
for _, row in mutations.iterrows():
    chrom = row['chromosome']
    pos = row['startpos']
    ref = row['ref']
    alt = row['alt']

    mutation_sequence = [ref, alt]  

    # Predict mutation probability using the RNN
    mutation_prob = mutation_prob(np.array([mutation_sequence]))  
    spliceai_score = mutation_prob 
    
    if INTRON_10_START <= pos <= INTRON_10_END:
        vcf_rows.append(f"{chrom}\t{pos}\t.\t{ref}\t{alt}\t.\t.\tSPLICEAI={spliceai_score}")

input_vcf = "spliceaiscores.vcf"
with open(input_vcf, "w") as f:
    f.write(vcf_header + "\n")
    f.write("\n".join(vcf_rows))

print(f"VCF file created: {input_vcf}")

def simulate_spliceai_score(chrom, pos, ref, alt):
    return round(random.uniform(0, 1), 4)

mutations['SpliceAI_max'] = mutations.apply(
    lambda row: simulate_spliceai_score(row['chromosome'], row['startpos'], row['ref'], row['alt']),
    axis=1
)

def hill_function(spliceai_score, kd_base=1.0, n=2.0):
    """
    This function computes the DSPD probability using the Hill function.
    The input spliceai_score is the predicted mutation probability from the RNN model.
    """
    kd_mutated = kd_base / (1 + spliceai_score)
    repression_probability = 1 / (1 + (spliceai_score / kd_mutated) ** n)
    return repression_probability

mutations['DSPS_probability'] = mutations['SpliceAI_max'].apply(hill_function)


mutations_INTRON10 = mutations[(mutations['startpos'] >= INTRON_10_START_10_START) & (mutations['startpos'] <= INTRON_10_ENDN_10_END)]

mutations_INTRON10.to_csv("cry1_intron10_spliceai_dsps_predictions.csv", index=False)

print("DSPD probabilities for Intron 11 saved to cry1_intron10_spliceai_dsps_predictions.csv")
print(mutations_INTRON10.head())  

print("Results saved in: cry1_intron10_spliceai_dsps_predictions.csv")
